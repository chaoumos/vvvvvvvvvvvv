import {
  collection,
  addDoc,
  query,
  where,
  getDocs,
  orderBy,
  Timestamp,
  doc,
  updateDoc,
  deleteDoc,
  onSnapshot,
  type Unsubscribe,
  getDoc,
  setDoc,
} from 'firebase/firestore';
import type { Blog, BlogStatus, SelectedTheme, ApiConnection, BlogPost } from '../types';
import { Octokit } from '@octokit/rest'; 
import { db } from './client-config';
import {
    getGitHubAuthenticatedUserLogin,
    createGitHubRepo,
    createInitialCommitWithReadme,
    commitBlogPostsToRepo,
    type GitHubRepoInfo, 
} from '../github'; 

const BLOGS_COLLECTION = 'blogs';
const API_CONNECTIONS_COLLECTION = 'api_connections';
const POSTS_SUBCOLLECTION = 'posts';

const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

async function getBlogPostsForBlog(blogId: string): Promise<BlogPost[]> {
  if (!db) {
    throw new Error("Firestore database is not initialized for fetching posts.");
  }
  const posts: BlogPost[] = [];
  try {
    const postsQuery = query(
      collection(db, BLOGS_COLLECTION, blogId, POSTS_SUBCOLLECTION),
      orderBy('createdAt', 'desc')
    );
    const querySnapshot = await getDocs(postsQuery);
    querySnapshot.forEach(docSnapshot => {
      const data = docSnapshot.data();
      const createdAtTimestamp = data.createdAt as Timestamp;
      posts.push({
        id: docSnapshot.id,
        ...data,
        createdAt: createdAtTimestamp?.toMillis ? createdAtTimestamp.toMillis() : (data.createdAt || 0),
      } as BlogPost);
    });
    return posts;
  } catch (error) {
    console.error(`Error fetching posts for blog ${blogId}:`, error);
    throw new Error('Failed to fetch blog posts.');
  }
}


export async function simulateBlogCreationProcess(blogId: string, siteNameFromArgs: string): Promise<void> {
  if (!db) {
    const firestoreErrorMsg = "Firestore not initialized during creation simulation.";
    console.error(firestoreErrorMsg);
    await updateBlogStatus(blogId, 'failed', { error: firestoreErrorMsg });
    return;
  }

  let blogData: Blog | undefined;
  let octokit: Octokit | undefined;
  let owner: string = '';
  let repoNameForGithub: string = ''; 
  let userId: string | undefined;
  let githubRepoUrl: string | undefined;

  try {
    const blogDocRef = doc(db, BLOGS_COLLECTION, blogId);
    const blogDocSnapshot = await getDoc(blogDocRef);

    if (!blogDocSnapshot.exists()) {
      throw new Error(`Blog with ID ${blogId} not found.`);
    }

    const rawData = blogDocSnapshot.data();
    userId = rawData?.userId;
    if (!userId) { throw new Error('User ID not found in blog document.'); }

    const createdAtTimestamp = rawData.createdAt as Timestamp;
    blogData = {
      id: blogDocSnapshot.id,
      ...rawData,
      createdAt: createdAtTimestamp?.toMillis ? createdAtTimestamp.toMillis() : (rawData.createdAt || 0),
    } as Blog;
    
    repoNameForGithub = blogData.siteName || siteNameFromArgs;
    if (!repoNameForGithub) {
        throw new Error('Site name for GitHub repository is missing.');
    }

    await updateBlogStatus(blogId, 'creating_repo');
    console.log(`Blog ${blogId}: Status updated to creating_repo.`);

    const apiConnections = await getApiConnection(userId);
    if (!apiConnections?.githubApiKey) {
      const errorMsg = 'GitHub API key is missing. Please add your GitHub Personal Access Token in the API Connections settings.';
      await updateBlogStatus(blogId, 'failed', { error: errorMsg });
      throw new Error(errorMsg);
    }

    octokit = new Octokit({ auth: apiConnections.githubApiKey });
    owner = await getGitHubAuthenticatedUserLogin(octokit);
    console.log(`Blog ${blogId}: Authenticated GitHub user: ${owner}`);

    const sanitizedDescription = (blogData.description || `A Hugo blog for ${repoNameForGithub} generated by HugoHost`)
      .replace(/[\u0000-\u001F\u007F-\u009F]/g, ' ')
      .replace(/\s\s+/g, ' ')
      .trim();

    console.log(`Blog ${blogId}: Attempting to get or create GitHub repo "${owner}/${repoNameForGithub}".`);
    const repoDetails: GitHubRepoInfo = await createGitHubRepo(octokit, owner, repoNameForGithub, sanitizedDescription);
    githubRepoUrl = repoDetails.html_url; // Store for later use
    repoNameForGithub = repoDetails.name; // Use the actual name from GitHub (in case of case differences etc)
    console.log(`Blog ${blogId}: GitHub repo ready: ${githubRepoUrl} (Default branch: ${repoDetails.default_branch})`);
    
    await updateBlogStatus(blogId, 'creating_repo', { githubRepoUrl, deploymentNote: `GitHub repository ${githubRepoUrl} is ready.` });


    try {
      await createInitialCommitWithReadme(octokit, owner, repoNameForGithub, blogData.name || repoNameForGithub, repoDetails.default_branch);
      console.log(`Blog ${blogId}: Initial README.md committed to ${repoDetails.default_branch} branch.`);
    } catch (initialCommitError: any) {
      if (initialCommitError.status === 422 && initialCommitError.message?.toLowerCase().includes("reference already exists")) {
        console.warn(`Blog ${blogId}: Could not create initial commit (branch ${repoDetails.default_branch} likely already exists with content): ${initialCommitError.message}. Proceeding...`);
      } else {
        console.error(`Blog ${blogId}: Error during initial commit: ${initialCommitError.message}`);
        throw initialCommitError; 
      }
    }
    await delay(1500);


    await updateBlogStatus(blogId, 'configuring_theme', { githubRepoUrl, deploymentNote: "Pushing initial content to GitHub repository..." });

    console.log(`Blog ${blogId}: Fetching blog posts...`);
    const postsToPush = await getBlogPostsForBlog(blogId);

    if (postsToPush.length > 0) {
      console.log(`Blog ${blogId}: Preparing to commit ${postsToPush.length} blog posts to ${owner}/${repoNameForGithub}.`);
      await commitBlogPostsToRepo(octokit, owner, repoNameForGithub, repoDetails.default_branch, postsToPush);
      console.log(`Blog ${blogId}: ${postsToPush.length} blog posts successfully pushed.`);
      const deploymentNote = `${postsToPush.length} blog posts and initial README.md pushed to GitHub. Ready for Cloudflare Pages.`;
      await updateBlogStatus(blogId, 'generating_config', { githubRepoUrl, deploymentNote });
    } else {
      console.log(`Blog ${blogId}: No blog posts to push. Repository contains initial README.md.`);
      await updateBlogStatus(blogId, 'generating_config', {
        githubRepoUrl,
        deploymentNote: `Initial README.md pushed. Add posts and trigger a build.`,
      });
    }

    await delay(1500);
    await updateBlogStatus(blogId, 'deploying', { githubRepoUrl, deploymentNote: "Content pushed. Configure Cloudflare Pages." });
    console.log(`Blog ${blogId}: Status updated to deploying.`);
    await delay(4000);

    const simulatedLiveUrl = `https://${repoNameForGithub.toLowerCase()}.example-pages.dev`; 
    const finalDeploymentNote = `Simulation complete. GitHub repository: ${githubRepoUrl}. Live URL ${simulatedLiveUrl} is a placeholder.`;
    await updateBlogStatus(blogId, 'live', {
      githubRepoUrl,
      liveUrl: simulatedLiveUrl,
      deploymentNote: finalDeploymentNote,
    });
    console.log(`Blog ${blogId}: Status updated to live. Simulated Live URL: ${simulatedLiveUrl}`);

  } catch (error: any) {
    console.error(`Error in blog creation simulation for ${blogId}:`, error);
    let simulationErrorMessage = `Simulation process failed: ${error.message || 'Unknown error'}`;

    if (error.name === 'HttpError' || error.status) { // Broader check for Octokit errors
        const status = error.status || 'N/A';
        let ghMessage = error.message; 
        if (error.response?.data?.message) {
          ghMessage = error.response.data.message;
        }
        simulationErrorMessage = `GitHub API Error (${status}): ${ghMessage}.`;
        if (error.response?.data?.documentation_url) {
          simulationErrorMessage += ` - ${error.response.data.documentation_url}`;
        }
        if (error.response?.data?.errors) {
           simulationErrorMessage += ` Details: ${JSON.stringify(error.response.data.errors)}`;
        }
        console.error("GitHub API Error details:", error.response?.data || error);
    } else if (error.isAxiosError) { // Example if using Axios directly, though Octokit wraps fetch
        simulationErrorMessage = `Network error during GitHub operation: ${error.message}`;
    }
    
    if (simulationErrorMessage.length > 1000) {
      simulationErrorMessage = simulationErrorMessage.substring(0, 997) + "...";
    }
    try {
      const repoUrlForError = githubRepoUrl || (owner && repoNameForGithub ? `https://github.com/${owner}/${repoNameForGithub}` : undefined);
      await updateBlogStatus(blogId, 'failed', { error: simulationErrorMessage, githubRepoUrl: repoUrlForError });
      console.log(`Blog ${blogId}: Status updated to failed due to simulation process error.`);
    } catch (statusUpdateError) {
      console.error(`Blog ${blogId}: Failed to update blog status to failed:`, statusUpdateError);
    }
  }
}


// Add a new blog
export async function addBlog(userId: string, blogData: Omit<Blog, 'id' | 'userId' | 'createdAt' | 'status'>): Promise<string> {
  try {
    if (!db) {
      throw new Error("Firestore database is not initialized.");
    }
    const docRef = await addDoc(collection(db, BLOGS_COLLECTION), {
      ...blogData,
      userId,
      status: 'pending' as BlogStatus,
      createdAt: Timestamp.now(),
      name: blogData.blogTitle, // ensure blogData has a name property for createInitialCommitWithReadme
    });
    return docRef.id;
  } catch (error) {
    console.error('Error adding blog:', error);
    throw new Error('Failed to add blog to Firestore.');
  }
}

// Get all blogs for a user
export async function getUserBlogs(userId: string): Promise<Blog[]> {
  try {
    if (!db) {
      throw new Error("Firestore database is not initialized.");
    }
    const q = query(
      collection(db, BLOGS_COLLECTION),
      where('userId', '==', userId),
      orderBy('createdAt', 'desc')
    );
    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map(docSnapshot => {
      const data = docSnapshot.data();
      const createdAtTimestamp = data.createdAt as Timestamp;
      return {
        id: docSnapshot.id,
        ...data,
        createdAt: createdAtTimestamp?.toMillis ? createdAtTimestamp.toMillis() : (data.createdAt || 0),
      } as Blog;
    });
  } catch (error) {
    console.error('Error fetching user blogs:', error);
    throw new Error('Failed to fetch user blogs.');
  }
}

// Stream user blogs
export function streamUserBlogs(
  userId: string,
  onUpdate: (blogs: Blog[]) => void,
  onError: (error: Error) => void
): Unsubscribe {
  if (!db) {
    const initError = new Error("Firestore database is not initialized. Cannot stream blogs.");
    console.error(initError.message);
    onError(initError);
    return () => {};
  }
  const q = query(
    collection(db, BLOGS_COLLECTION),
    where('userId', '==', userId),
    orderBy('createdAt', 'desc')
  );

  const unsubscribe = onSnapshot(q, (querySnapshot) => {
    const blogs = querySnapshot.docs.map(docSnapshot => {
      const data = docSnapshot.data();
      const createdAtTimestamp = data.createdAt as Timestamp;
      return {
        id: docSnapshot.id,
        ...data,
        createdAt: createdAtTimestamp?.toMillis ? createdAtTimestamp.toMillis() : (data.createdAt || 0),
      } as Blog;
    });
    onUpdate(blogs);
  }, (err: any) => {
    console.error("Error streaming user blogs from Firestore:", err);
    let errorMessage = err.message || 'An unknown error occurred while streaming blogs.';
    if (err.code === 'failed-precondition' && err.message.includes('query requires an index')) {
        errorMessage = `Firestore query requires an index. Please create it. The Firestore console should provide a link to create the missing index. Details: ${err.message}`;
    } else if (err.code === 'permission-denied') {
        errorMessage = `Permission denied. Check Firestore security rules. Details: ${err.message}`;
    } else if (err.code === 'unimplemented' && err.message.includes('currently building')) {
      errorMessage = `The required Firestore index is building. Please wait a few minutes and try again. Details: ${err.message}`;
    }
    onError(new Error(errorMessage));
  });

  return unsubscribe;
}

// Get a single blog by ID, ensuring it belongs to the user
export async function getBlog(blogId: string, userId: string): Promise<Blog | null> {
  if (!db) {
    throw new Error("Firestore database is not initialized.");
  }
  if (!blogId || !userId) {
    console.error("getBlog called with missing blogId or userId.");
    throw new Error("Blog ID and User ID are required.");
  }
  try {
    const blogRef = doc(db, BLOGS_COLLECTION, blogId);
    const docSnapshot = await getDoc(blogRef);

    if (docSnapshot.exists()) {
      const data = docSnapshot.data();
      if (data.userId !== userId) {
        console.warn(`User ${userId} attempted to access blog ${blogId} owned by ${data.userId}.`);
        return null;
      }
      const createdAtTimestamp = data.createdAt as Timestamp;
      return {
        id: docSnapshot.id,
        ...data,
        createdAt: createdAtTimestamp?.toMillis ? createdAtTimestamp.toMillis() : (data.createdAt || 0),
      } as Blog;
    }
    return null;
  } catch (error: any) {
    console.error(`Error fetching blog ${blogId}:`, error);
    throw new Error(`Failed to fetch blog details.`);
  }
}


// Update blog status
export async function updateBlogStatus(blogId: string, status: BlogStatus, details?: Partial<Pick<Blog, 'githubRepoUrl' | 'liveUrl' | 'error' | 'deploymentNote'>>): Promise<void> {
  try {
    if (!db) {
      throw new Error("Firestore database is not initialized.");
    }
    const blogRef = doc(db, BLOGS_COLLECTION, blogId);
    await updateDoc(blogRef, { status, ...details, updatedAt: Timestamp.now() });
  } catch (error) {
    console.error('Error updating blog status:', error);
    throw new Error('Failed to update blog status.');
  }
}

// Delete a blog
export async function deleteBlog(blogId: string): Promise<void> {
  try {
    if (!db) {
      throw new Error("Firestore database is not initialized.");
    }
    const blogRef = doc(db, BLOGS_COLLECTION, blogId);
    // TODO: Consider deleting subcollections like 'posts' if necessary
    await deleteDoc(blogRef);
  } catch (error) {
    console.error('Error deleting blog:', error);
    throw new Error('Failed to delete blog.');
  }
}

// Save API connections for a user
export async function saveApiConnection(userId: string, data: Partial<Omit<ApiConnection, 'userId'>>): Promise<void> {
  try {
    if (!db) {
      throw new Error("Firestore database is not initialized.");
    }
    if (!userId) {
      throw new Error("User ID is missing.");
    }
    const apiConnectionRef = doc(db, API_CONNECTIONS_COLLECTION, userId);
    const dataToSave: Partial<ApiConnection> = { userId };
    (Object.keys(data) as Array<keyof Omit<ApiConnection, 'userId'>>).forEach(key => {
      if (data[key] !== undefined) {
        (dataToSave as any)[key] = data[key];
      }
    });
    await setDoc(apiConnectionRef, dataToSave, { merge: true });
  } catch (error: any) {
    console.error('Error saving API connection:', error);
    let toastMessage = "Failed to save API connections.";
    if (error.code === 'permission-denied') toastMessage += " Check Firestore rules.";
    else if (error.message) toastMessage += ` Details: ${error.message.substring(0,100)}`;
    throw new Error(toastMessage.substring(0, 250));
  }
}

// Get API connections for a user
export async function getApiConnection(userId: string): Promise<ApiConnection | null> {
  try {
    if (!db) {
      throw new Error("Firestore database is not initialized.");
    }
    if (!userId) {
      throw new Error("User ID is required.");
    }
    const apiConnectionRef = doc(db, API_CONNECTIONS_COLLECTION, userId);
    const docSnapshot = await getDoc(apiConnectionRef);

    if (docSnapshot.exists()) {
      const data = docSnapshot.data();
      return {
        userId: data.userId,
        githubApiKey: data.githubApiKey || undefined,
        cloudflareApiToken: data.cloudflareApiToken || undefined,
        cloudflareApiKey: data.cloudflareApiKey || undefined,
        cloudflareEmail: data.cloudflareEmail || undefined,
        cloudflareAccountId: data.cloudflareAccountId || undefined,
      } as ApiConnection;
    }
    return null;
  } catch (error) {
    console.error('Error fetching API connection:', error);
    throw new Error('Failed to fetch API connection.');
  }
}

// Add a new blog post to a specific blog
export async function addBlogPost(
  userId: string,
  blogId: string,
  postData: Omit<BlogPost, 'id' | 'blogId' | 'userId' | 'createdAt' | 'updatedAt'>
): Promise<string> {
  if (!db) throw new Error("Firestore database is not initialized.");
  if (!userId || !blogId) throw new Error("User ID and Blog ID are required.");

  try {
    const blog = await getBlog(blogId, userId); 
    if (!blog) throw new Error("Blog not found or permission denied.");

    const postsCollectionRef = collection(db, BLOGS_COLLECTION, blogId, POSTS_SUBCOLLECTION);
    const docRef = await addDoc(postsCollectionRef, {
      ...postData,
      userId, // Storing userId on post document
      blogId, // Storing blogId on post document, can be useful for direct queries
      createdAt: Timestamp.now(),
      updatedAt: Timestamp.now(),
    });
    return docRef.id;
  } catch (error) {
    console.error('Error adding blog post:', error);
    throw new Error('Failed to add blog post.');
  }
}

// Stream blog posts for a specific blog
export function streamBlogPosts(
  userId: string, // Used for verification, actual query might not need it if rules handle parent access
  blogId: string,
  onUpdate: (posts: BlogPost[]) => void,
  onError: (error: Error) => void
): Unsubscribe {
  if (!db) {
    onError(new Error("Firestore database is not initialized."));
    return () => {};
  }
  if (!userId || !blogId) {
    onError(new Error("User ID and Blog ID are required."));
    return () => {};
  }

  const postsCollectionRef = collection(db, BLOGS_COLLECTION, blogId, POSTS_SUBCOLLECTION);
  // The query is on a subcollection. Firestore rules on the parent 'blogs/{blogId}' document
  // can protect this subcollection. If posts also have a 'userId' field,
  // you could add: where("userId", "==", userId) for more granular rules,
  // but this requires an index on `posts/userId`.
  // For simplicity, we assume parent document rules are sufficient for read access.
  const q = query(postsCollectionRef, orderBy('createdAt', 'desc'));

  return onSnapshot(q, (querySnapshot) => {
    const posts = querySnapshot.docs.map(docSnapshot => {
      const data = docSnapshot.data();
      const createdAtTimestamp = data.createdAt as Timestamp;
      const updatedAtTimestamp = data.updatedAt as Timestamp;
      return {
        id: docSnapshot.id,
        blogId: blogId, // Explicitly set blogId from param
        userId: data.userId, // Assuming posts have userId from addBlogPost
        ...data,
        createdAt: createdAtTimestamp?.toMillis ? createdAtTimestamp.toMillis() : (data.createdAt || 0),
        updatedAt: updatedAtTimestamp?.toMillis ? updatedAtTimestamp.toMillis() : (data.updatedAt || undefined),
      } as BlogPost;
    });
    onUpdate(posts);
  }, (err: any) => {
    console.error(`Error streaming posts for blog ${blogId}:`, err);
    let errorMessage = err.message || 'Unknown error streaming blog posts.';
    if (err.code === 'permission-denied') errorMessage = `Permission denied for posts. Check Firestore rules.`;
    else if (err.code === 'unimplemented' && err.message.includes('currently building')) errorMessage = `Firestore index for posts is building.`;
    else if (err.code === 'failed-precondition' && err.message.includes('query requires an index')) errorMessage = `Firestore query for posts needs an index.`;
    onError(new Error(errorMessage));
  });
}